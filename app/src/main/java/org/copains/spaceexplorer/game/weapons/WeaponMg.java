package org.copains.spaceexplorer.game.weapons;

import org.copains.spaceexplorer.game.lifeforms.LifeForm;
import org.copains.tools.dice.DiceMg;

/**
 * Created by SÃ©bastien Delaire <the.pes@gmail.com>
 * on 13/06/2016.
 */

public class WeaponMg {

    private static final int DICE_FACES = 6;

    private short lastDiceRoll;
    private short lastDamage;

    /**
     * computes if a ranged weapon hit the target with success
     * @param lf the shooter
     * @return true if the shot is successful
     */
    public boolean computeRangedWeaponTouchSuccess(LifeForm lf) {
        int diceRoll = DiceMg.rollDice(DICE_FACES);
        int rollToHit = DICE_FACES;
        switch (lf.getRangeWeapon()) {

            case NONE:
                rollToHit = 7;
                break;
            case LASER:
                rollToHit = 5;
                break;
            case EXPLOSIVE:
                rollToHit = 4;
                break;
            case HEAVY_RIFLE:
                rollToHit = 5;
                break;
            case RIFLE:
                rollToHit = 5;
                break;
            case MULTI:
                rollToHit = 5;
                break;
        }
        lastDiceRoll = (short)diceRoll;
        return diceRoll >= rollToHit;
    }

    /**
     * returns damage generated by weapon (special cases for EXPLOSIVE and MULTI)
     * Explosive generates to type of damage :
     *  - the bigger one : (result/10) is the damage on the target cell
     *  - the smaller one : (result % 10) is the damage on the surrounding cells
     * TODO: implement multi weapon somewhere
     * @param lf the shooter
     * @return number of damage generated by weapon.
     */
    public short getWeaponDamage(LifeForm lf) {
        switch (lf.getRangeWeapon()) {

            case NONE:
                lastDamage = 0;
                return 0;
            case LASER:
                lastDamage = 3;
                return 3;
            case EXPLOSIVE:
                lastDamage = 3;
                return 31;
            case HEAVY_RIFLE:
                lastDamage = 3;
                return 3;
            case RIFLE:
                lastDamage = 1;
                return 1;
            case MULTI:
                lastDamage = 0;
                return 0;
        }
        return -1;
    }

    public short getLastDiceRoll() {
        return lastDiceRoll;
    }

    public short getLastDamage() {
        return lastDamage;
    }

}
